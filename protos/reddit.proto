syntax = "proto3";

package myapp;

message User {
    int32 id = 1;
}
  
message Post {
    string title = 1;
    string text = 2;
    oneof multimedia {
        string video_url = 3;
        string image_url = 4;
    }
    int32 score = 5;
    enum State {
        NORMAL = 0;
        LOCKED = 1;
        HIDDEN = 2;  // Representing deleted
    }
    State state = 6;
    string publication_date = 7;
}
  
message Comment {
    int32 id = 1;
    string text = 2;
    string author = 3;
    int32 score = 4;
    enum State {
      NORMAL = 0;
      HIDDEN = 1;
    }
    State state = 5;
    string publication_date = 6;
    int32 parent_post_id = 7;  // Link to Post
    int32 parent_comment_id = 8;  // Add this line
}

message CommentBranchResponse {
    repeated Comment comments = 1; // A repeated field to hold multiple comments
}

// Define request and response messages for each RPC call
message CreatePostRequest {
  string title = 1;
  string text = 2;
  string video_url = 3;
  string image_url = 4;
}

message CreatePostResponse {
  int32 post_id = 1;
}

message VotePostRequest {
  int32 post_id = 1;
  bool upvote = 2; // true for upvote, false for downvote
}

message VoteResponse {
  bool success = 1;
}

message GetPostRequest {
  int32 post_id = 1;
}

message CreateCommentRequest {
  int32 post_id = 1;
  string author = 2;
  string text = 3;
}

message CreateCommentResponse {
  int32 comment_id = 1;
}

message VoteCommentRequest {
  int32 comment_id = 1;
  bool upvote = 2; // true for upvote, false for downvote
}

message GetTopCommentsRequest {
  int32 post_id = 1;
  int32 n = 2; // Number of top comments to retrieve
}

message TopCommentsResponse {
  repeated Comment comments = 1;
}

message ExpandCommentBranchRequest {
  int32 comment_id = 1;
  int32 n = 2; // Depth of comment tree to retrieve
}

// Define the service with RPC methods
service RedditService {
  rpc CreatePost(CreatePostRequest) returns (CreatePostResponse);
  rpc VotePost(VotePostRequest) returns (VoteResponse);
  rpc GetPost(GetPostRequest) returns (Post);
  rpc CreateComment(CreateCommentRequest) returns (CreateCommentResponse);
  rpc VoteComment(VoteCommentRequest) returns (VoteResponse);
  rpc GetTopComments(GetTopCommentsRequest) returns (TopCommentsResponse);
  rpc ExpandCommentBranch(ExpandCommentBranchRequest) returns (CommentBranchResponse);
}
